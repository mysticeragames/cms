name: '[job] Docker image'

on:
  workflow_call:
    inputs:
      DOCKER_PUSH:
        type: number
        default: 0
      DOCKER_PUSH_LATEST:
        type: number
        default: 0
      IMAGE_NAME:
        type: string
        default: "mysticeragames/makeitstatic-cms"
      IMAGE_TAG:
        type: string
        default: "dev-${{ github.ref_name }}" # dev-main, or manual workflow trigger example: dev-60-fix-git-2.47.2-vulerability
    secrets:
      DOCKERHUB_TOKEN:
        required: true

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    env:
      DOCKERHUB_USER: rboonzaijer
      IMAGE_PROD_LATEST: ${{ inputs.IMAGE_NAME }}:latest
      IMAGE_BUILD_CACHE_NAME: ${{ inputs.IMAGE_NAME }}-buildcache # The build cache is used to cache Docker layers, to speed up the build process (put in other repository)
      IMAGE_TEST: local/docker/build:test # The test-image doesn't need to be pushed, use it only for local testing

    steps:



    ######################## SETUP ########################

    - name: Set variables
      id: vars
      run: |
        # Remove special characters in tag name + only lowercase
        IMAGE_PROD="${{ inputs.IMAGE_NAME }}:$( echo ${{ inputs.IMAGE_TAG }} | sed 's|[^a-zA-Z0-9\\.\\-\\_]|-|g' | awk '{print tolower($0)}' )"
        
        # Create a CSV of tags to be build
        IMAGE_PROD_TAGS_CSV="${IMAGE_PROD}"
        if [[ "${{ inputs.DOCKER_PUSH_LATEST }}" = "1" ]]; then
          IMAGE_PROD_TAGS_CSV="${IMAGE_PROD},${{ env.IMAGE_PROD_LATEST }}"
        fi

        # Set output variables
        {
          echo "IMAGE_PROD=${IMAGE_PROD}";
          echo "IMAGE_PROD_TAGS_CSV=${IMAGE_PROD_TAGS_CSV}";
        } >> "$GITHUB_OUTPUT"

    - name: Debug variables
      run: |
        echo "IMAGE_PROD=${{ steps.vars.outputs.IMAGE_PROD }}"
        echo "IMAGE_PROD_TAGS_CSV=${{ steps.vars.outputs.IMAGE_PROD_TAGS_CSV }}"
        echo "IMAGE_PROD_LATEST=${{ env.IMAGE_PROD_LATEST }}"
        echo "IMAGE_TEST=${{ env.IMAGE_TEST }}"
        echo "IMAGE_BUILD_CACHE_NAME=${{ env.IMAGE_BUILD_CACHE_NAME }}"

      # Use a hash (commit) and not a short release-version to make sure it has not been tampered with
      # Release versions can easily be removed and re-uploaded. Hashes not so easily...
      # More info: https://blog.rafaelgss.dev/why-you-should-pin-actions-by-commit-hash
    - name: Checkout
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # https://github.com/actions/checkout/releases/tag/v4.2.2



    ######################## DOCKER SETUP ########################

    - name: Login to Docker Hub
      uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # https://github.com/docker/login-action/releases/tag/v3.4.0
      with:
        username: ${{ env.DOCKERHUB_USER }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # https://github.com/docker/setup-qemu-action/releases/tag/v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # https://github.com/docker/setup-buildx-action/releases/tag/v3.10.0



    ######################## TEST BUILD ########################

    - name: Build + cache test image (only linux/amd64)
      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # https://github.com/docker/build-push-action/releases/tag/v6.17.0
      with:
        load: true
        target: final_test
        tags: ${{ env.IMAGE_TEST }}
        platforms: linux/amd64
        cache-from: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-amd64
        cache-to: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-amd64,mode=max

    - name: Run tests (linux/amd64)
      timeout-minutes: 5
      run: |
        docker images ${{ env.IMAGE_TEST }}
        docker run --rm --platform linux/amd64 ${{ env.IMAGE_TEST }} sh -c "php -d xdebug.mode=coverage vendor/bin/phpunit --coverage-html ./reports/coverage"
        docker run --rm --platform linux/amd64 ${{ env.IMAGE_TEST }} sh -c "php vendor/bin/phpcs"
        docker run --rm --platform linux/amd64 ${{ env.IMAGE_TEST }} sh -c "php vendor/bin/phpstan --memory-limit=512M analyse src tests"

        # sanity check: see if the container actually serves content + test a non-default port
        bash .cmd/check-container.sh ${{ env.IMAGE_TEST }} 8251 linux/amd64



    ######################## PRODUCTION BUILD ########################

    - if: ${{ inputs.DOCKER_PUSH == 1 }}
      name: Build + push production image (linux/amd64,linux/arm64)
      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # https://github.com/docker/build-push-action/releases/tag/v6.17.0
      with:
        push: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD_TAGS_CSV }} # could include also ':latest'
        platforms: linux/amd64,linux/arm64
        cache-from: |
          type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-amd64
          type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-arm64

    - if: ${{ inputs.DOCKER_PUSH == 1 }}
      name: Cache image layers (:cache-linux-amd64)
      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # https://github.com/docker/build-push-action/releases/tag/v6.17.0
      with:
        load: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD }}
        platforms: linux/amd64
        cache-from: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-amd64
        cache-to: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-amd64,mode=max

    - if: ${{ inputs.DOCKER_PUSH == 1 }}
      name: Cache image layers (:cache-linux-arm64)
      uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # https://github.com/docker/build-push-action/releases/tag/v6.17.0
      with:
        load: true
        target: final_prod
        tags: ${{ steps.vars.outputs.IMAGE_PROD }}
        platforms: linux/arm64
        cache-from: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-arm64
        cache-to: type=registry,ref=${{ env.IMAGE_BUILD_CACHE_NAME }}:cache-linux-arm64,mode=max
